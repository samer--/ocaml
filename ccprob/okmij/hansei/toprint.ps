%!PS-Adobe-3.0
%%Title: toprint.ml
%%For: Samer Abdallah
%%Creator: a2ps version 4.14
%%CreationDate: Fri Jul 19 12:52:01 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(let) K
( nearly_one = 1.0 -. 1e-7;;) p 32 T () S 40 T () S
(\(* For robust comparison with 1.0 *\)) c n
() p n
(\(* Explore but do not flatten the tree: ) c n
(   perform exact inference to the given depth) N
(   We still pick out all the produced answers and note the failures. *\)) N
(let) K
( shallow_explore maxdepth \(choices : 'a pV\) : 'a pV =) p n
(  ) S
(let) K
( add_answer pcontrib v mp = PMap.insert_with \(+.\) v pcontrib mp ) p
(in) K n
(  ) p
(let) K
( ) p
(rec) K
( loop pc depth ans acc = ) p
(function) K n
(    | [] -> \(ans,acc\)) p n
(    | \(p,V v\)::rest -> loop pc depth \(add_answer \(p *. pc\) v ans\) acc rest) N
(    | c::rest ) S
(when) K
( depth >= maxdepth -> loop pc depth ans \(c::acc\) rest) p n
(    | \(p,C t\)::rest -> ) N
() S 8 T (  ) S
(let) K
( \(ans,ch\) = loop \(pc *. p\) \(succ depth\) ans [] \(t \(\)\) ) p
(in) K n
() p 8 T (  ) S
(let) K
( ptotal = List.fold_left \() p
(fun) K
( pa \(p,_\) -> pa +. p\) 0.0 ch ) p
(in) K n
() p 8 T (  ) S
(let) K
( acc =) p n
() S 8 T (    ) S
(if) K
( ptotal = 0.0 ) p
(then) K
( acc) p n
() S 8 T (    ) S
(else) K
( ) p
(if) K
( ptotal < nearly_one ) p
(then) K n
() p 8 T (     \(p *. ptotal, ) S
(let) K
( ch = List.map \() p
(fun) K
( \(p,x\) -> \(p /. ptotal,x\)\) ch) p n
() S 8 T (                   ) S
(in) K
( C \() p
(fun) K
( \(\) -> ch\)\)::acc) p n
() S 8 T (    ) S
(else) K
( \(p, C \() p
(fun) K
( \(\) -> ch\)\)::acc ) p
(in) K n
() p 8 T (  loop pc depth ans acc rest) N
(  ) S
(in) K n
(  ) p
(let) K
( \(ans,susp\) = loop 1.0 0 PMap.empty [] choices) p n
(  ) S
(in) K
( PMap.foldi \() p
(fun) K
( v p a -> \(p,V v\)::a\) ans susp;;) p n
() N
() N
(\(* Sample a distribution with a look-ahead exploration *\)) c n
(\(* A single sample can give us more than one data point: if one of) N
(   the choices is a definite value, we note it right away, with) N
(   its weight. The rest of the choices will be re-scaled automatically.) N
(*\)) N
(\(* Given a sampler, a function 'seed->'seed, run it a certain number) N
(   of times and return the resulting seed and the number of runs) N
(*\)) N
(type) K
( sample_runner = ) p n
(        {sample_runner : 'seed. 'seed -> \('seed -> 'seed\) -> 'seed * ) S
(int) k
(};;) p n
() N
(let) K
( sample_dist \(selector : 'a pV selector\) \(sample_runner : sample_runner\)) p n
(    ch : 'a pV =) N
(  ) S
(let) K
( look_ahead pcontrib \(ans,acc\) = ) p
(function) K
( ) p
(\(* explore the branch a bit *\)) c n
(    | \(p,V v\) -> \(PMap.insert_with \(+.\) v \(p *. pcontrib\) ans, acc\)) p n
(    | \(p,C t\) -> ) S
(begin) K n
() p 8 T () S
(match) K
( t \(\) ) p
(with) K n
() p 8 T (| [] -> \(ans,acc\)) N
() S 8 T (| [\(p1,V v\)] -> ) N
() S 8 T (    \(PMap.insert_with \(+.\) v \(p *. p1 *. pcontrib\) ans, acc\)) N
() S 8 T (| ch ->) N
() S 8 T (    ) S
(let) K
( ptotal = List.fold_left \() p
(fun) K
( pa \(p,_\) -> pa +. p\) 0.0 ch ) p
(in) K n
() p 8 T (    \(ans,) N
( ) S 8 T (      ) S
(if) K
( ptotal < nearly_one ) p
(then) K n
() p 8 T (        \(p *. ptotal, List.map \() S
(fun) K
( \(p,x\) -> \(p /. ptotal,x\)\) ch\)::acc ) p n
(              ) S
(else) K
( \(p, ch\)::acc\)) p n
(    ) S
(end) K
( ) p
(in) K n
(  ) p
(let) K
( ) p
(rec) K
( loop pcontrib ans = ) p
(function) K n
(    | [\(p,V v\)]  -> PMap.insert_with \(+.\) v \(p *. pcontrib\) ans) p n
(    | []         -> ans) N
(    | [\(p,C th\)] -> loop \(p *. pcontrib\) ans \(th \(\)\)) N
(    | ch -> ) S 16 T () S 24 T () S 32 T () S
(\(* choosing one thread randomly *\)) c n
() p 8 T () S
(begin) K n
() p 8 T () S
(match) K
( List.fold_left \(look_ahead pcontrib\) \(ans,[]\) ch ) p
(with) K n
() p 8 T (| \(ans,[]\) -> ans) N
() S 8 T (| \(ans,cch\) ->) N
() S 8 T () S
(let) K
( \(ptotal,th\) = selector cch ) p
(in) K n
() p 8 T (loop \(pcontrib *. ptotal\) ans th ) S
(end) K
( ) p
(in) K n
(  ) p
(let) K
( toploop pcontrib ans cch =) p 40 T () S
(\(* cch are already pre-explored *\)) c n
(    ) p
(let) K
( \(ptotal,th\) = selector cch ) p
(in) K n
(    loop \(pcontrib *. ptotal\) ans th ) p
(in) K n
(  ) p
(let) K
( driver pcontrib vals cch =) p n
(    ) S
(let) K
( \(ans,nsamples\) = ) p n
(toprint.ml) (Page 1/3) (Jul 19, 13 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      sample_runner.sample_runner PMap.empty ) p n
() S 8 T (\() S
(fun) K
( ans -> toploop pcontrib ans cch\) ) p
(in) K n
(    ) p
(let) K
( ns = float_of_int nsamples ) p
(in) K n
(    ) p
(let) K
( ans = PMap.foldi) p n
() S 8 T (         \() S
(fun) K
( v p ans -> ) p n
(                   PMap.insert_with \(+.\) v \(ns *. p\) ans\) vals ans ) S
(in) K n
(    printf ") p
(sample_importance: done %d worlds\\n) str
(" nsamples;) p n
(    PMap.foldi \() S
(fun) K
( v p a -> \(p /. ns,V v\)::a\) ans [] ) p
(in) K n
(  ) p
(let) K
( ) p
(rec) K
( make_threads pcontrib ans ch =  ) p
(\(* pre-explore initial threads *\)) c n
(    ) p
(match) K
( List.fold_left \(look_ahead pcontrib\) \(ans,[]\) ch ) p
(with) K n
(    | \(ans,[]\) -> ) p
(\(* pre-exploration solved the problem *\)) c n
() p 8 T (PMap.foldi \() S
(fun) K
( v p a -> \(p,V v\)::a\) ans []) p n
(    | \(ans,[\(p,ch\)]\) -> ) S
(\(* only one choice, make more *\)) c n
() p 8 T (make_threads \(pcontrib *. p\) ans ch) N
() S 8 T (  ) S
(\(* List.rev is for literal compatibility with an earlier version *\)) c n
(    | \(ans,cch\) -> driver pcontrib ans \(List.rev cch\)) p n
(  ) S
(in) K n
(  make_threads 1.0 PMap.empty ch) p n
(;;) N
() N
() N
(type) K
( pReq = Done |  Choice ) p
(of) K
( \() p
(unit) k
( -> pReq\) cdist) p n
( ) N
(let) K
( pp = new_prompt \(\);;) p n
() N
(\(* We often use mutable variables as `communication channel', to appease) c n
(   the type-checker. The variable stores the `option' value --) N
(   most of the time, None. One function writes a Some x value,) N
(   and another function almost immediately reads the value -- exactly) N
(   once. The protocol of using such a variable is a sequence of) N
(   one write almost immediately followed by one read.) N
(   We use the following helpers to access our `communication channel'.) N
(*\)) N
(let) K
( from_option = ) p
(function) K
( Some x -> x | None -> failwith ") p
(fromoption) str
(";;) p n
() N
(let) K
( read_answer r = ) p
(let) K
( v = from_option !r ) p
(in) K
( r := None; v ) p
(\(* for safety *\)) c n
() p n
(let) K
( reify0 \(thunk : ) p
(unit) k
( -> 'a\) : 'a pV =) p n
(  ) S
(let) K
( answer = ref None ) p
(in) K n
(  ) p
(let) K
( ) p
(rec) K
( interp = ) p
(function) K
( ) p n
(    | Done -> [\(1.0, V \(read_answer answer\)\)] ) S
(\(* deterministic value *\)) c n
(    | Choice ch -> List.map \() p
(fun) K
( \(p,th\) -> \(p, C \() p
(fun) K
( \(\) -> interp \(th \(\)\)\)\)\)) p n
() S 8 T (          ch) N
(  ) S
(in) K n
(  ) p
(let) K
( mem = !thread_local ) p
(in) K n
(  ) p
(let) K
( v = push_prompt pp \() p
(fun) K
( \(\) -> ) p n
() S 8 T ( thread_local := Memory.newm; answer := Some \(thunk \(\)\); Done\) ) S
(in) K n
(  thread_local := mem; ) p n
(  interp v;;) N
( ) N
() N
(\(* Two basic library functions for probabilistic programming *\)) c n
() p n
(\(* We make it appear as if capturing the continuation also captures) c n
(   the dynamic environment, thread_local. Shift implicitly) N
(   wraps the captured continuation into a prompt; and so we) N
(   add mem_prompt: whenever control is delimited, so should be `memory'.) N
(*\)) N
(let) K
( dist \(choices : 'a dist\) : 'a  =) p n
(  ) S
(let) K
( curr_mem = !thread_local ) p
(in) K n
(  shift0 pp \() p
(fun) K
( k -> ) p n
(    Choice ) N
(       \(List.map \() S
(fun) K
( \(p,v\) -> ) p n
() S 8 T ( \(p, \() S
(fun) K
( \(\) -> ) p n
() S 8 T (          ) S
(let) K
( mem = !thread_local ) p
(in) K n
() p 8 T () S 16 T (  ) S
(let) K
( \(\) = thread_local := curr_mem ) p
(in) K n
() p 8 T () S 16 T (  ) S
(let) K
( v = k v ) p
(in) K n
() p 8 T () S 16 T (  thread_local := mem; v\)\)\) choices\)\)) N
(;;) N
(toprint.ml) (Page 2/3) (Jul 19, 13 12:51) title
border
grestore
(Printed by Samer Abdallah) rhead
(toprint.ml) (1/2) (Friday July 19, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(let) K
( fail \(\) = abort pp \(Choice []\);;) p n
() N
(\(* The `inverse' of reify: reflect a search tree into a program) c n
(   denoting the same distribution. ) N
(*\)) N
() p n
(let) K
( reflect \(tree : 'a pV\) : 'a  =) p n
(  ) S
(let) K
( curr_mem = !thread_local ) p
(in) K n
(  ) p
(let) K
( ) p
(rec) K
( make_choices k pv =) p n
(    Choice \(List.map \() N
() S 8 T (    ) S
(function) K
( \(p,V x\) -> \(p, ) p
(fun) K
( \(\) -> k x\)) p n
(                  |  \(p,C x\) -> \(p, ) S
(fun) K
( \(\) -> make_choices k \(x \(\)\)\)\) pv\) ) p
(in) K n
(  shift0 pp \() p
(fun) K
( k -> ) p n
(    make_choices \() S
(fun) K
( x -> ) p n
(      ) S
(let) K
( mem = !thread_local ) p
(in) K n
(      ) p
(let) K
( \(\) = thread_local := curr_mem ) p
(in) K n
(      ) p
(let) K
( v = k x ) p
(in) K n
(      thread_local := mem; v\)) p n
(     tree\);;) N
() N
(\(* Selectors, used by approximate inference procedures *\)) c n
() p n
(\(* Random selection from a list of choices, using system randomness *\)) c n
(let) K
( random_selector randomseed : 'a selector =) p n
(  ) S
(let) K
( \(\) = Random.init randomseed ) p
(in) K n
(  ) p
(let) K
( ) p
(rec) K
( selection r ptotal pcum = ) p
(function) K n
(      | [] -> failwith ") p
(Choice selection: can't happen) str
(") p n
(      | \(\(p,th\)::rest\) -> ) N
() S 8 T (  ) S
(let) K
( pcum = pcum +. p ) p
(in) K n
() p 8 T (  ) S
(if) K
( r < pcum ) p
(then) K
( \(ptotal,th\)) p n
() S 8 T (  ) S
(else) K
( selection r ptotal pcum rest) p n
(  ) S
(in) K
( ) p
(fun) K
( choices ->) p n
(    ) S
(let) K
( ptotal = List.fold_left \() p
(fun) K
( pa \(p,_\) -> pa +. p\) 0.0 choices ) p
(in) K n
(    ) p
(let) K
( r = Random.) p
(float) k
( ptotal ) p
(in) K
(     ) p
(\(* 0<=r<ptotal *\)) c n
(    selection r ptotal 0.0 choices) p n
(;;) N
() N
(\(* A selector from a list of choices relying on the non-determinism) c n
(   supported by the parent reifier.) N
(*\)) N
(let) K
( dist_selector ch =) p n
(  ) S
(let) K
( ptotal = List.fold_left \() p
(fun) K
( pa \(p,_\) -> pa +. p\) 0.0 ch ) p
(in) K n
(  \(ptotal, dist \(List.map \() p
(fun) K
( \(p,v\) -> \(p /. ptotal, v\)\) ch\)\)) p n
(;;) N
() N
() N
(let) K
( sample_importance selector nsamples \(thunk : ) p
(unit) k
( -> 'a\) : 'a pV =) p n
(  sample_dist selector ) N
(    {sample_runner =) N
(     ) S
(fun) K
( z th -> ) p n
(      ) S
(let) K
( ) p
(rec) K
( loop z = ) p
(function) K
( 0 -> \(z,nsamples\) | n -> loop \(th z\) \(pred n\)) p n
(      ) S
(in) K
( loop z nsamples}) p n
(    \(shallow_explore 3 \(reify0 thunk\)\);;) N
() N
(toprint.ml) (Page 3/3) (Jul 19, 13 12:51) title
border
grestore
(Printed by Samer Abdallah) rhead
(toprint.ml) (2/2) (Friday July 19, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
